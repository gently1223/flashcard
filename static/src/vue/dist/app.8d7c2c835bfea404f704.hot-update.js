webpackHotUpdate("app",{

/***/ "./node_modules/cache-loader/dist/cjs.js?!./node_modules/babel-loader/lib/index.js!./node_modules/cache-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/views/profile.vue?vue&type=script&lang=js&":
/*!***********************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/cache-loader/dist/cjs.js??ref--13-0!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/views/profile.vue?vue&type=script&lang=js& ***!
  \***********************************************************************************************************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var vue_numeric_input__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue-numeric-input */ \"./node_modules/vue-numeric-input/dist/vue-numeric-input.umd.js\");\n/* harmony import */ var vue_numeric_input__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(vue_numeric_input__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var vue_hover_zoom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vue-hover-zoom */ \"./node_modules/vue-hover-zoom/dist/vue-hover-zoom.common.js\");\n/* harmony import */ var vue_hover_zoom__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(vue_hover_zoom__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! axios */ \"./node_modules/axios/index.js\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! vue */ \"./node_modules/vue/dist/vue.esm.js\");\n/* harmony import */ var vue_toast_notification__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! vue-toast-notification */ \"./node_modules/vue-toast-notification/dist/index.min.js\");\n/* harmony import */ var vue_toast_notification__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(vue_toast_notification__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var vue_toast_notification_dist_theme_sugar_css__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! vue-toast-notification/dist/theme-sugar.css */ \"./node_modules/vue-toast-notification/dist/theme-sugar.css\");\n/* harmony import */ var vue_toast_notification_dist_theme_sugar_css__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(vue_toast_notification_dist_theme_sugar_css__WEBPACK_IMPORTED_MODULE_5__);\n\n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  components: {\n    VueNumericInput: (vue_numeric_input__WEBPACK_IMPORTED_MODULE_0___default()),\n    VueHoverZoom: (vue_hover_zoom__WEBPACK_IMPORTED_MODULE_1___default())\n  },\n  data: () => ({\n    // imgURL: 'https://picsum.photos/id/1005/600/200',\n    temp: \"\",\n    imgURL: 'OM1-1.jpeg',\n    showModal: false,\n    showTreeviewModal: false,\n    showSettingsModal: false,\n    selectedItem: 0,\n    not_difficult_value: 1,\n    easy_value: 1,\n    mistake_value: 1,\n    difficult_value: 1,\n    number_exercises_value: 1,\n    uptodown_items: ['History'],\n    level: [\"1 days\", \"4 weeks\", \"4 hours\", \"1 hours\"],\n    not_difficult_value_combo: ['Vuetify'],\n    not_difficult_value_items: ['Programming', 'Design', 'Vue', 'Vuetify'],\n    easy_value_combo: ['Design'],\n    easy_value_items: ['Programming', 'Design', 'Vue', 'Vuetify'],\n    mistake_value_combo: ['Vue'],\n    mistake_value_items: ['Programming', 'Design', 'Vue', 'Vuetify'],\n    difficult_value_combo: ['Vuetify'],\n    difficult_value_items: ['Programming', 'Design', 'Vue', 'Vuetify'],\n    points_value: 34,\n    mon: false,\n    tue: false,\n    wen: false,\n    thu: false,\n    fri: false,\n    sat: false,\n    sun: false,\n    items: [],\n    files: [],\n    rows: [],\n    allrows: []\n  }),\n  computed: {\n    formData: {\n      get: function () {\n        return this.$store.getters[\"authPageModule/getFormData\"];\n      }\n    },\n\n    name() {\n      if (!this.formData.firstName || !this.formData.lastName) return this.formData.firstName;else return this.formData.firstName + \" \" + this.formData.lastName;\n    }\n\n  },\n\n  async created() {\n    vue__WEBPACK_IMPORTED_MODULE_3__[\"default\"].$toast.open('Please wait until loading page..');\n    axios__WEBPACK_IMPORTED_MODULE_2___default.a.get('http://localhost:8000/api/question_book/').then(response => {\n      for (var i = 0; i < response.data.length; i++) {\n        this.items.push({\n          text: response.data[i].file_name,\n          icon: 'mdi-book'\n        });\n        console.log(response.data[i].contents);\n        this.allrows.push(response.data[i].contents);\n      }\n    });\n    axios__WEBPACK_IMPORTED_MODULE_2___default.a.get('http://localhost:8000/api/setting/?user_id=' + this.username + '&password=' + this.password).then(response => {\n      this.subscriptions = response.data;\n      console.log(this.subscriptions);\n\n      if (this.subscriptions.length != 0) {\n        vue__WEBPACK_IMPORTED_MODULE_3__[\"default\"].$toast.open('Success Login');\n        setTimeout(() => {\n          this.$store.dispatch(\"authPageModule/loginAndSaveToken\", {\n            username: this.username,\n            asswor: this.password\n          });\n        }, 3000);\n      } else {\n        vue__WEBPACK_IMPORTED_MODULE_3__[\"default\"].$toast.error('Invalid Member');\n      }\n    });\n  },\n\n  methods: {\n    onClickOk() {\n      this.showModal = false;\n      this.showTreeviewModal = true;\n      this.rows = this.allrows[this.selectedItem];\n    },\n\n    getImgUrl() {\n      var images = __webpack_require__(\"./src/assets/img sync \\\\.jpeg$\");\n\n      return images('./' + this.imgURL);\n    },\n\n    onTreeviewOk() {\n      this.showTreeviewModal = false;\n      this.axios.get(\"https://jsonplaceholder.typicode.com/todos/1\").then(response => {\n        this.$swal({\n          title: \"Updated\",\n          text: \"Your Subject was updated successfully\",\n          icon: \"success\",\n          confirmButtonText: \"Done\"\n        });\n      }).catch(error => {\n        this.$swal({\n          title: \"Oops, Something went wrong ! \",\n          text: error.message,\n          icon: \"warning\"\n        });\n      });\n    },\n\n    onSettingsOk() {\n      //fake post request\n      this.showSettingsModal = false;\n      this.axios.get(\"https://jsonplaceholder.typicode.com/todos/1\").then(response => {\n        this.$swal({\n          title: \"Updated\",\n          text: \"The Setting was updated successfully\",\n          icon: \"success\",\n          confirmButtonText: \"Done\"\n        });\n      }).catch(error => {\n        this.$swal({\n          title: \"Oops, Something went wrong ! \",\n          text: error.message,\n          icon: \"warning\"\n        });\n      });\n    },\n\n    backToPreviousPage() {\n      this.$router.back();\n    },\n\n    updateInfo() {\n      //fake post request\n      this.axios.get(\"https://jsonplaceholder.typicode.com/todos/1\").then(response => {\n        this.$swal({\n          title: \"Updated\",\n          text: \"Your profile was updated successfully\",\n          icon: \"success\",\n          confirmButtonText: \"Done\"\n        });\n      }).catch(error => {\n        this.$swal({\n          title: \"Oops, Something went wrong ! \",\n          text: error.message,\n          icon: \"warning\"\n        });\n      });\n    }\n\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/cache-loader/dist/cjs.js?!./node_modules/babel-loader/lib/index.js!./node_modules/cache-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/views/profile.vue?vue&type=script&lang=js&\n");

/***/ })

})